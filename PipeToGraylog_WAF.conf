input {
#   syslog{
#      port => 5514
#      type => syslog
#      codec => cef
#   }

   tcp{
      port => 5514
      type => waf
   }
   
   udp{
      port => 5514
      codec => cef 
      type => waf
   }

}
filter {


   if( [sourceAddress] and [sourcePort] ){
      mutate{
	     rename => { "sourceAddress" => "src_ip" }
		 rename => { "sourcePort" => "src_port" }
	  }
   }
   
   if( [destinationAddress] and [destinationPort] ){
      mutate{
	     rename => { "destinationAddress" => "dst_ip" }
		 rename => { "destinationPort" => "dst_port" }
	  }
   }
   
   if( [deviceCustomString1Label] and [deviceCustomString1]){
      mutate{
         add_field => [ "%{deviceCustomString1Label}" , "%{deviceCustomString1}" ]
         remove_field => ["deviceCustomString1Label"]
         remove_field => ["deviceCustomString1"]
      }
   }
   
   if( [deviceCustomString2Label] and [deviceCustomString2]){
      mutate{
         add_field => [ "%{deviceCustomString2Label}" , "%{deviceCustomString2}" ]
         remove_field => ["deviceCustomString2Label"]
         remove_field => ["deviceCustomString2"]
      }
   }
   
   if( [deviceCustomString3Label] and [deviceCustomString3]){
      mutate{
         add_field => [ "%{deviceCustomString3Label}" , "%{deviceCustomString3}" ]
         remove_field => ["deviceCustomString3Label"]
         remove_field => ["deviceCustomString3"]
      }
   }

   if( [deviceCustomString4Label] and [deviceCustomString4]){
      mutate{
         add_field => [ "%{deviceCustomString4Label}" , "%{deviceCustomString4}" ]
         remove_field => ["deviceCustomString4Label"]
         remove_field => ["deviceCustomString4"]
      }
   }

   if( [deviceCustomString5Label] and [deviceCustomString5]){
      mutate{
         add_field => [ "%{deviceCustomString5Label}" , "%{deviceCustomString5}" ]
         remove_field => ["deviceCustomString5Label"]
         remove_field => ["deviceCustomString5"]
      }
   }

   mutate{
      add_field => { "short_message" => " WAF %{ServiceName} %{ApplicationName}% %{Policy} %{deviceAction} from %{src_ip} to %{dst_ip} port %{dst_port} " }
	  add_tag => ["Imperva_SecureSphere"]
   }
   
   
        # Geolocate logs that have src_ip if that src_ip is a non-RFC1918 address
        if [src_ip] and [src_ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
               source => "src_ip"
               target => "SourceIPGeo"
          }

            # Delete 0,0 in SourceIPGeo.location if equal to 0,0
            if ([SourceIPGeo.location] and [SourceIPGeo.location] =~ "0,0") {
                mutate {
                    replace => [ "SourceIPGeo.location", "" ]
                }
            }
        }

        # Geolocate logs that have dst_ip and if that dst_ip is a non-RFC1918 address
        if [dst_ip] and [dst_ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
                source => "dst_ip"
                target => "DestinationIPGeo"
            }
      
            # Delete 0,0 in DestinationIPGeo.location if equal to 0,0
            if ([DestinationIPGeo.location] and [DestinationIPGeo.location] =~ "0,0") {
                mutate {
                    replace => [ "DestinationIPGeo.location", "" ]
                }
            }
        }

        # Takes the 5-tuple of source address, source port, destination address, destination port, and protocol and does a SHA1 hash to fingerprint the flow.  This is a useful
        # way to be able to do top N terms queries on flows, not just on one field.
        if [src_ip] and [dst_ip] {
            fingerprint {
                concatenate_sources => true
                method => "SHA1"
                key => "logstash"
                source => [ "src_ip", "src_port", "dst_ip", "dst_port", "protocol" ]
            }
        }
}
output {
		gelf {
				host => ["10.1.30.143"]
				#,"172.16.160.42","172.16.160.45"]
				protocol => "TCP"
				port => "12201"
				sender => "%{message}"
				}


#		stdout { 
#				codec => rubydebug 
#				}
}
