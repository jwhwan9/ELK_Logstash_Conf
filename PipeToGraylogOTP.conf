input {
#    beats {
#        port => "5044"
#	client_inactivity_timeout => 2400
#	#codec => json
#    }
    
#    tcp {
#        port => "5514"
#        type => "syslog"
#    }

    syslog{
         port => 5514
#         codec => cef
         type => "motp"        
    }

}
filter {

		if [type] == "motp" {
		
			if "token" in [message]{
				grok {
					match => { "message" => "<%{POSINT:priority}>%{POSINT:[version]} %{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:[host]} %{DATA:[program]} %{DATA:[pid]} - %{DATA:[m1]} \[operation\]:%{DATA:[operation]}, \[account\]:%{DATA:[src_user]}, \[source IP\]:%{DATA:[src_ip]}, \[pc name\]:%{DATA:[src_host]}, \[winlogon version\]:%{DATA:[winlogon_version]}, \[error code\]:%{DATA:[errorcode]}, \[token type\]:%{DATA:[token_type]}, \[start time\]:%{DATA:[start_time]}, \[end time\]:%{DATA:[end_time]}, \[execute time\]:%{DATA:[execute_time]}, \[message\]:%{GREEDYDATA:[msg]}"}
				}	
			    
				mutate {
					add_field => { "short_message" => "motp %{host} %{src_user} %{src_ip} %{operation} %{m1} %{msg} dev %{src_host}" }
				}							
							   
		   }else if "validateotp" in [message]{
				grok {
					match => { "message" => "<%{POSINT:priority}>%{POSINT:[version]} %{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:[host]} %{DATA:[program]} %{DATA:[pid]} - %{DATA:[m1]} \[operation\]:%{DATA:[operation]}, \[account\]:%{DATA:[src_user]}, \[source IP\]:%{DATA:[src_ip]}, \[pc name\]:%{DATA:[src_host]}, \[winlogon version\]:%{DATA:[winlogon_version]}, \[error code\]:%{DATA:[errorcode]}, \[start time\]:%{DATA:[start_time]}, \[end time\]:%{DATA:[end_time]}, \[execute time\]:%{DATA:[execute_time]}, \[message\]:%{GREEDYDATA:[msg]}"}
				}	
		   
				mutate {
					add_field => { "short_message" => "motp %{host} %{src_user} %{src_ip} %{operation} %{m1} %{msg} " }
				}
				
		   }else{
		      grok {
        		match => { "message" => "<%{POSINT:priority}>%{POSINT:[version]} %{TIMESTAMP_ISO8601:timestamp} %{HOSTNAME:[host]} %{DATA:[program]} %{DATA:[pid]} %{GREEDYDATA:[message]}"}
			   }
				mutate {
					add_field => { "short_message" => "motp %{message} " }
				}			   
		   }
		   
		   mutate {
                convert => [ "GeoIP.dma_code", "integer" ]
                convert => [ "GeoIP.latitude", "float" ]
                convert => [ "GeoIP.longitude", "float" ]
				}
				
			        # Geolocate logs that have src_ip if that src_ip is a non-RFC1918 address
			if [src_ip] and [src_ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
				geoip {
					source => "src_ip"
					target => "SourceIPGeo"
				}

				# Delete 0,0 in SourceIPGeo.location if equal to 0,0
				if ([SourceIPGeo.location] and [SourceIPGeo.location] =~ "0,0") {
					mutate {
						replace => [ "SourceIPGeo.location", "" ]
					}
				}
			}
			if ([src_host]){
				mutate {
					# Original message has been fully parsed, so remove it.
					remove_field => [ "message" ]
				}
			}
		}
		
		if [type] == "wineventlog" and [event_id] == 5156 {
				#drop{}
				}
				
}
output {
		gelf {
				host => ["10.1.30.143"]
				#,"172.16.160.42","172.16.160.45"]
				protocol => "TCP"
				port => "12201"
				sender => "%{message}"
				}


#		stdout { 
#				codec => rubydebug 
#				}
}
