input {
#    beats {
#        port => "5044"
#	client_inactivity_timeout => 2400
#	#codec => json
#    }
    
#    tcp {
#        port => "5514"
#        type => "syslog"
#    }

    syslog{
         port => 5514
#         codec => cef
         type => "vpn"        
    }

}

filter {

	if [type] == "vpn" {
	
		if "PulseSecure:" in [message]{
			if "authentication" in [message] or "for user with NCIP" in [message] {
				grok {
				match => { "message" => "<%{POSINT:syslog_priority}>%{POSINT:[version]} %{TIMESTAMP_ISO8601:timestamp} %{PROG:host} %{PROG:program}: - - - %{TIMESTAMP_ISO8601:timestamp2} - %{WORD:w1} - \[%{NOTSPACE:src_ip}\] %{DATA:src_user}\(%{DATA:vpn_channel}\)\[%{GREEDYDATA:vpn_group}\] - %{GREEDYDATA:vpn_message} %{NOTSPACE:dst_ip}"}    
				}
				
				mutate {
					add_field => { "short_message" => "vpn %{host} %{src_user} %{src_ip} %{operation} %{w1} %{vpn_channel} %{vpn_message} %{dst_ip} dev %{src_host}" }
				}
			}else{
				grok {
				match => { "message" => "<%{POSINT:syslog_priority}>%{POSINT:[version]} %{TIMESTAMP_ISO8601:timestamp} %{PROG:host} %{PROG:program}: - - - %{TIMESTAMP_ISO8601:timestamp2} - %{WORD:w1} - \[%{NOTSPACE:src_ip}\] %{DATA:src_user}\(%{DATA:vpn_channel}\)\[%{GREEDYDATA:vpn_group}\] - %{GREEDYDATA:vpn_message}"}    
				}

				mutate {
					add_field => { "short_message" => "vpn %{message}" }
				}
			}
			
			mutate {
                convert => [ "GeoIP.dma_code", "integer" ]
                convert => [ "GeoIP.latitude", "float" ]
                convert => [ "GeoIP.longitude", "float" ]
				}
				
			        # Geolocate logs that have src_ip if that src_ip is a non-RFC1918 address
			if [src_ip] and [src_ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
				geoip {
					source => "src_ip"
					target => "SourceIPGeo"
				}

				# Delete 0,0 in SourceIPGeo.location if equal to 0,0
				if ([SourceIPGeo.location] and [SourceIPGeo.location] =~ "0,0") {
					mutate {
						replace => [ "SourceIPGeo.location", "" ]
					}
				}
			}
			if ([src_host]){
				mutate {
					# Original message has been fully parsed, so remove it.
					remove_field => [ "message" ]
				}
			}
		}else{
			grok {
			match => { "message" => "<%{POSINT:syslog_priority}>%{POSINT:[syslog_version]} %{TIMESTAMP_ISO8601:timestamp} %{PROG:syslog_host} %{PROG:syslog_program}: - - - %{TIMESTAMP_ISO8601:timestamp2} - %{WORD:w1} - \[%{NOTSPACE:src_ip}\] %{GREEDYDATA:src_user}\[%{GREEDYDATA:group}\] - %{GREEDYDATA:vpn_message}"}
			}    
		}
		mutate {
			# Original message has been fully parsed, so remove it.
			remove_field => [ "message" ]
		}
	}
  
  if [type] == "wineventlog" and [event_id] == 5156 {
    #drop{}
    }
}

output {
		gelf {
				host => ["10.1.30.143"]
				#,"172.16.160.42","172.16.160.45"]
				protocol => "TCP"
				port => "12201"
				sender => "%{message}"
				}


#		stdout { 
#				codec => rubydebug 
#				}
}
