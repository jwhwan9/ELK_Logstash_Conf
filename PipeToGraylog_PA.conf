input {
#    beats {
#        port => "5044"
#	client_inactivity_timeout => 2400
#	#codec => json
#    }
    
    tcp{
        port => 5514
        type => pa
    }

    udp{
       port => 5514
#       codec => cef
       type => pa
    }

}

filter {
    if [type] == "pa" {
        mutate{        
        add_field => { "host" => "Panorama" }
        }
        # Log types are "TRAFFIC", "THREAT", "CONFIG", "SYSTEM" and "HIP-MATCH".

        # Traffic log fields: https://docs.paloaltonetworks.com/pan-os/10-0/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/traffic-log-fields
        if ([message] =~ /TRAFFIC/) {
            csv {
                source => "message"
                columns => [
					"FUTURE_USE",
					"ReceiveTime",
					"SerialNumber",
					"Type",
					"Threat_ContentType",
					"FUTURE_USE",
					"GeneratedTime",
					"src_ip",
					"dst_ip",
					"nat_src_ip",
					"nat_dst_ip",
					"RuleName",
					"src_user",
					"dst_user",
					"Application",
					"VirtualSystem",
					"src_zone",
					"dst_zone",
					"InboundInterface",
					"OutboundInterface",
					"LogAction",
					"FUTURE_USE",
					"SessionID",
					"RepeatCount",
					"src_port",
					"dst_port",
					"nat_src_Port",
					"nat_dst_Port",
					"Flags",
					"Protocol",
					"Action",
					"Bytes",
					"BytesSent",
					"BytesReceived",
					"Packets",
					"StartTime",
					"ElapsedTime",
					"cat",
					"FUTURE_USE",
					"SequenceNumber",
					"ActionFlags",
					"src_country",
					"dst_country",
					"FUTURE_USE",
					"PacketsSent",
					"PacketsReceived",
					"SessionEndReason",
					"devGroupHierarchyL1",
					"devGroupHierarchyL2",
					"devGroupHierarchyL3",
					"devGroupHierarchyL4",
					"VirtualSystemName",
					"devName",
					"Actionsrc",
					"src_VMUUID",
					"dst_VMUUID",
					"TunnelIDIMSI",
					"MonitorTagIMEI",
					"ParentSessionID",
					"ParentStartTime",
					"TunnelType",
					"SCTPAssociationID",
					"SCTPChunks",
					"SCTPChunksSent",
					"SCTPChunksReceived",
					"RuleUUID",
					"HTTP2Connection",
					"AppFlapCount",
					"PolicyID",
					"LinkSwitches",
					"SDWANCluster",
					"SDWANdevType",
					"SDWANClusterType",
					"SDWANSite",
					"dyn_UserGroupName",
					"XFFAddress",
					"src_devcat",
					"src_devProfile",
					"src_devModel",
					"src_devVendor",
					"src_devOSFamily",
					"src_devOSVersion",
					"src_host",
					"src_mac",
					"dst_devcat",
					"dst_devProfile",
					"dst_devModel",
					"dst_devVendor",
					"dst_devOSFamily",
					"dst_devOSVersion",
					"dst_host",
					"dst_mac",
					"ContainerID",
					"PODNamespace",
					"PODName",
					"src_ext_dyn_List",
					"dst_ext_dyn_List",
					"HostID",
					"SerialNumber",
					"src_dyn_AddressGroup",
					"dst_dyn_AddressGroup",
					"SessionOwner",
					"HighResTime",
					"ASliceSvcType",
					"ASliceDiff",
					"app_Subcat",
					"app_cat",
					"app_Technology",
					"app_Risk",
					"app_Character",
					"app_Container",
					"Tunneledapp",
					"app_SaaS",
					"app_SanctionState",
					"Offloaded"
				]
            }

            mutate {
                convert => [ "Bytes", "integer" ]
                convert => [ "BytesReceived", "integer" ]
                convert => [ "BytesSent", "integer" ]
                convert => [ "ElapsedTime", "integer" ]
                convert => [ "GeoIP.dma_code", "integer" ]
                convert => [ "GeoIP.latitude", "float" ]
                convert => [ "GeoIP.longitude", "float" ]
                convert => [ "NAT_dst_port", "integer" ]
                convert => [ "NAT_src_port", "integer" ]
                convert => [ "Packets", "integer" ]
                convert => [ "PacketsReceived", "integer" ]
                convert => [ "PacketsSent", "integer" ]
                convert => [ "SequenceNumber", "integer" ]

				add_field => { "short_message" => " PA %{Type} %{Action} %{Threat_ContentType} %{Application} from %{src_ip} to %{dst_ip} port %{dst_port} by %{RuleName}" }

				
				remove_field => "SCTPAssociationID"
				remove_field => "SCTPChunks"
				remove_field => "SCTPChunksSent"
				remove_field => "SCTPChunksReceived"
				remove_field => "devGroupHierarchyL2"
				remove_field => "devGroupHierarchyL3"
				remove_field => "devGroupHierarchyL4"	
				remove_field => "ContainerID"
				remove_field => "PODNamespace"
				remove_field => "PODName"
				remove_field => "src_ext_dyn_List"
				remove_field => "dst_ext_dyn_List"
				remove_field => "HostID"
				remove_field => "SerialNumber"
				remove_field => "src_dyn_AddressGroup"
				remove_field => "dst_dyn_AddressGroup"
				remove_field => "SessionOwner"
				remove_field => "HighResTime"
				remove_field => "ASliceSvcType"
				remove_field => "ASliceDiff"
					
				remove_field => "FUTURE_USE"

                add_tag => [ "PAN-OS_traffic"]
            }			
        }

        # Threat log fields: https://docs.paloaltonetworks.com/pan-os/10-0/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/threat-log-fields		
        else if ([message] =~ /THREAT/) {
            csv {
                source => "message"
                columns => [ 
					"FUTURE_USE",
					"ReceiveTime",
					"SerialNumber",
					"Type",
					"Threat_ContentType",
					"FUTURE_USE",
					"GeneratedTime",
					"src_ip",
					"dst_ip",
					"nat_src_ip",
					"nat_dst_ip",
					"RuleName",
					"src_user",
					"dst_user",
					"Application",
					"VirtualSystem",
					"src_zone",
					"dst_zone",
					"InboundInterface",
					"OutboundInterface",
					"LogAction",
					"FUTURE_USE",
					"SessionID",
					"RepeatCount",
					"src_port",
					"dst_port",
					"nat_src_port",
					"nat_dst_port",
					"Flags",
					"IPProtocol",
					"Action",
					"URL_Filename",
					"ThreatID",
					"Category",
					"Severity",
					"Direction",
					"SequenceNumber",
					"ActionFlags",
					"src_Location",
					"dst_Location",
					"FUTURE_USE",
					"ContentType",
					"PCAP_ID",
					"FileDigest",
					"Cloud",
					"URLIndex",
					"UserAgent",
					"FileType",
					"XForwardedFor",
					"Referer",
					"Sender",
					"Subject",
					"Recipient",
					"ReportID",
					"devGroupHierarchyLevel1",
					"devGroupHierarchyLevel2",
					"devGroupHierarchyLevel3",
					"devGroupHierarchyLevel4",
					"VirtualSystemName",
					"devName",
					"FUTURE_USE",
					"src_VMUUID",
					"dst_VMUUID",
					"HTTPMethod",
					"TunnelIDIMSI",
					"MonitorTagIMEI",
					"ParentSessionID",
					"ParentStartTime",
					"TunnelType",
					"ThreatCategory",
					"ContentVersion",
					"FUTURE_USE",
					"SCTPAssociationID",
					"PayloadProtocolID",
					"HTTPHeaders",
					"URLCategoryList",
					"RuleUUID",
					"HTTP2Connection",
					"DynamicUserGroupName",
					"XFFAddress",
					"src_devCategory",
					"src_devProfile",
					"src_devModel",
					"src_devVendor",
					"src_devOSFamily",
					"src_devOSVersion",
					"src_host",
					"src_mac",
					"dst_devCategory",
					"dst_devProfile",
					"dst_devModel",
					"dst_devVendor",
					"dst_devOSFamily",
					"dst_devOSVersion",
					"dst_host",
					"dst_mac",
					"ContainerID",
					"PODNamespace",
					"PODName",
					"src_ExternalDynamicList",
					"dst_ExternalDynamicList",
					"HostID",
					"SerialNumber",
					"DomainEDL",
					"src_DynamicAddressGroup",
					"dst_DynamicAddressGroup",
					"PartialHash",
					"HighResolutionTimestamp",
					"Reason",
					"Justification",
					"ASliceServiceType",
					"app_Subcategory",
					"app_Category",
					"app_Technology",
					"app_Risk",
					"app_Characteristic",
					"app_Container",
					"Tunneledapp",
					"app_SaaS",
					"app_SanctionedState"		
				]
            }

			if([Threat_ContentType]=="url"){
				mutate{
				add_field => { "short_message" => " PA %{Type} %{Action} %{Threat_ContentType} %{Application} from %{src_ip} by %{RuleName} to %{dst_ip} port %{dst_port} %{URL_Filename} " }
				add_tag => [ "PAN-OS_threat_url"]
				}
			}else if( [Action] == "sinkhole"){
				mutate{
				add_field => { "short_message" => " PA %{Type} %{Action} %{Threat_ContentType} %{Application} from %{src_ip} by %{RuleName} to %{dst_ip} port %{dst_port} %{URL_Filename} " }
				add_tag => [ "PAN-OS_threat_sinkhole"]
				}
			}else if( [Threat_ContentType] == "file"){
				mutate{
				add_field => { "short_message" => " PA %{Type} %{Action} %{Threat_ContentType} %{Application} from %{src_ip} by %{RuleName} to %{dst_ip} port %{dst_port} caused %{ThreatID} = %{URL_Filename} " }
				add_tag => [ "PAN-OS_threat_file"]
				}
			}else if( [Threat_ContentType] == "wildfire"){
				mutate{
				add_field => { "short_message" => " PA %{Type} %{Action} %{Threat_ContentType} %{Application} from %{src_ip} by %{RuleName} to %{dst_ip} port %{dst_port} caused %{ThreatID} = %{URL_Filename} " }
				add_tag => [ "PAN-OS_threat_wildfire"]
				}
			}			
			else{
				mutate{
				add_field => { "short_message" => " PA %{Type} %{Action} %{Threat_ContentType} %{Application} from %{src_ip} by %{RuleName} to %{dst_ip} port %{dst_port} caused %{ThreatID}" }
				add_tag => ["PAN-OS_threat"]
				}
			}

            mutate {
                convert => [ "GeoIP.dma_code", "integer" ]
                convert => [ "GeoIP.latitude", "float" ]
                convert => [ "GeoIP.longitude", "float" ]
                convert => [ "NAT_dst_port", "integer" ]
                convert => [ "NAT_src_port", "integer" ]
                convert => [ "SequenceNumber", "integer" ]
				
				remove_field => "SerialNumber"
				remove_field => "Flags"
				remove_field => "ActionFlags"
				remove_field => "devGroupHierarchyLevel2"
				remove_field => "devGroupHierarchyLevel3"
				remove_field => "devGroupHierarchyLevel4"	
				remove_field => "ContainerID"
				remove_field => "PODNamespace"
				remove_field => "PODName"
				remove_field => "SrcExtDynamicList"
				remove_field => "DstExtDynamicList"
				remove_field => "HostID"
				remove_field => "SerialNumber"
				remove_field => "DomainEDL"
				remove_field => "src_ExternalDynamicList"
				remove_field => "dst_ExternalDynamicList"
				remove_field => "PartialHash"
				remove_field => "HighResolutionTimestamp"
				remove_field => "Reason"
				remove_field => "Justification"
				remove_field => "ASliceServiceType"
					
				remove_field => "FUTURE_USE"					 												
				
                #add_tag => ["PAN-OS_threat"]
            }
        }# USERID log fields: https://docs.paloaltonetworks.com/pan-os/10-0/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/user-id-log-fields
        else if ([message] =~ /USERID/) {
            csv {
                source => "message"
                columns => [ 
					"FUTURE_USE", 
					"ReceiveTime", 
					"SerialNumber", 
					"Type", 
					"Threat_ContentType", 
					"FUTURE_USE", 
					"GeneratedTime", 
					"VirtualSystem", 
					"src_ip", 
					"src_user", 
					"DataSourceName", 
					"EventID", 
					"RepeatCount", 
					"TimeOutThreshold", 
					"src_port", 
					"dst_port", 
					"DataSource", 
					"DataSourceType", 
					"SequenceNumber", 
					"ActionFlags", 
					"DevGroupHierarchyL1", 
					"DevGroupHierarchyL2", 
					"DevGroupHierarchyL3", 
					"DevGroupHierarchyL4", 
					"VirtualSystemName", 
					"DeviceName", 
					"VirtualSystemID", 
					"FactorType", 
					"FactorCompletionTime", 
					"FactorNumber", 
					"FUTURE_USE", 
					"FUTURE_USE", 
					"UserGroupFlags", 
					"UserbySource", 
					"HighResolutionTimestamp"				
				]
            }

            mutate {
                convert => [ "GeoIP.dma_code", "integer" ]
                convert => [ "GeoIP.latitude", "float" ]
                convert => [ "GeoIP.longitude", "float" ]
                convert => [ "NAT_dst_port", "integer" ]
                convert => [ "NAT_src_port", "integer" ]
                convert => [ "SequenceNumber", "integer" ]
				
				remove_field => "SerialNumber"
				remove_field => "DevGroupHierarchyL2"
				remove_field => "DevGroupHierarchyL3"
				remove_field => "DevGroupHierarchyL4"	
				remove_field => "VirtualSystemID"
				remove_field => "FactorType"
				remove_field => "FactorCompletionTime"
				remove_field => "FactorNumber"
				remove_field => "UserGroupFlags"
				remove_field => "UserbySource"
				
				remove_field => "FUTURE_USE"
					 
					
      
				add_field => { "short_message" => " PA %{Type} %{src_user} from %{src_ip}" }
				
                add_tag => ["PAN-OS_userid"]
            }
        }else{
			mutate {
			add_field => { "short_message" => "%{message}" }
			}
		}

        mutate {
            # Original message has been fully parsed, so remove it.
            remove_field => [ "message" ]
        }

        # Geolocate logs that have src_ip if that src_ip is a non-RFC1918 address
        if [src_ip] and [src_ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
               source => "src_ip"
               target => "SourceIPGeo"
          }

            # Delete 0,0 in SourceIPGeo.location if equal to 0,0
            if ([SourceIPGeo.location] and [SourceIPGeo.location] =~ "0,0") {
                mutate {
                    replace => [ "SourceIPGeo.location", "" ]
                }
            }
        }

        # Geolocate logs that have dst_ip and if that dst_ip is a non-RFC1918 address
        if [dst_ip] and [dst_ip] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
                source => "dst_ip"
                target => "DestinationIPGeo"
            }
      
            # Delete 0,0 in DestinationIPGeo.location if equal to 0,0
            if ([DestinationIPGeo.location] and [DestinationIPGeo.location] =~ "0,0") {
                mutate {
                    replace => [ "DestinationIPGeo.location", "" ]
                }
            }
        }

        # Takes the 5-tuple of source address, source port, destination address, destination port, and protocol and does a SHA1 hash to fingerprint the flow.  This is a useful
        # way to be able to do top N terms queries on flows, not just on one field.
        if [src_ip] and [dst_ip] {
            fingerprint {
                concatenate_sources => true
                method => "SHA1"
                key => "logstash"
                source => [ "src_ip", "src_port", "dst_ip", "dst_port", "Protocol" ]
            }
        }				
		
    }
}


output {
		gelf {
				host => ["10.1.30.143"]
				#,"172.16.160.42","172.16.160.45"]
				protocol => "TCP"
				port => "12201"
				sender => "%{message}"
				}


#		stdout { 
#				codec => rubydebug 
#				}
}
